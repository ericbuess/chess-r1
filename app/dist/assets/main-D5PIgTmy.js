(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))o(s);new MutationObserver(s=>{for(const a of s)if(a.type==="childList")for(const i of a.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&o(i)}).observe(document,{childList:!0,subtree:!0});function t(s){const a={};return s.integrity&&(a.integrity=s.integrity),s.referrerPolicy&&(a.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?a.credentials="include":s.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function o(s){if(s.ep)return;s.ep=!0;const a=t(s);fetch(s.href,a)}})();const n={info:(d,e,t=null)=>{t?console.log(`[${d}] ${e}`,t):console.log(`[${d}] ${e}`)},warn:(d,e,t=null)=>{t?console.warn(`[${d}] ${e}`,t):console.warn(`[${d}] ${e}`)},error:(d,e,t=null)=>{t?console.error(`[${d}] ${e}`,t):console.error(`[${d}] ${e}`)},debug:(d,e,t=null)=>{t?console.log(`[${d}] ${e}`,t):console.log(`[${d}] ${e}`)}};typeof PluginMessageHandler<"u"?(console.log("Running as R1 Creation"),n.info("SYSTEM","Running as R1 Creation")):(console.log("Running in browser mode"),n.info("SYSTEM","Running in browser mode"));class S{constructor(){n.info("GAME","Initializing new ChessGame instance"),this.board=this.initializeBoard(),this.currentPlayer="white",this.selectedSquare=null,this.gameStatus="playing",this.moveHistory=[],this.enPassantTarget=null,this.castlingRights={white:{kingside:!0,queenside:!0},black:{kingside:!0,queenside:!0}},this.theme="classic",this.soundEnabled=!0,this.allowUndo=!0,this.gameStartTime=new Date().toISOString(),this.gameMode="human-vs-bot",this.humanColor="white",this.boardFlipped=!1,this.isUndoRedoAction=!1,this.sounds=this.createSoundSystem(),n.info("GAME","ChessGame instance created successfully",{theme:this.theme,soundEnabled:this.soundEnabled,allowUndo:this.allowUndo,gameMode:this.gameMode,humanColor:this.humanColor})}initializeBoard(){const e=Array(8).fill(null).map(()=>Array(8).fill(null));for(let o=0;o<8;o++)e[1][o]={type:"pawn",color:"black"},e[6][o]={type:"pawn",color:"white"};const t=["rook","knight","bishop","queen","king","bishop","knight","rook"];for(let o=0;o<8;o++)e[0][o]={type:t[o],color:"black"},e[7][o]={type:t[o],color:"white"};return e}createSoundSystem(){if(typeof AudioContext<"u"||typeof webkitAudioContext<"u"){const e=AudioContext||webkitAudioContext,t=new e;return{move:()=>{if(!this.soundEnabled)return;const o=t.createOscillator(),s=t.createGain();o.connect(s),s.connect(t.destination),o.type="sine",o.frequency.setValueAtTime(300,t.currentTime),o.frequency.exponentialRampToValueAtTime(150,t.currentTime+.04),s.gain.setValueAtTime(.08,t.currentTime),s.gain.exponentialRampToValueAtTime(.001,t.currentTime+.04),o.start(t.currentTime),o.stop(t.currentTime+.04)},capture:()=>{if(!this.soundEnabled)return;const o=t.createOscillator(),s=t.createGain();o.connect(s),s.connect(t.destination),o.type="sine",o.frequency.setValueAtTime(400,t.currentTime),o.frequency.exponentialRampToValueAtTime(180,t.currentTime+.03),s.gain.setValueAtTime(.06,t.currentTime),s.gain.exponentialRampToValueAtTime(.001,t.currentTime+.03),o.start(t.currentTime),o.stop(t.currentTime+.03);const a=t.createOscillator(),i=t.createGain();a.connect(i),i.connect(t.destination),a.type="sine",a.frequency.setValueAtTime(350,t.currentTime+.04),a.frequency.exponentialRampToValueAtTime(160,t.currentTime+.07),i.gain.setValueAtTime(.05,t.currentTime+.04),i.gain.exponentialRampToValueAtTime(.001,t.currentTime+.07),a.start(t.currentTime+.04),a.stop(t.currentTime+.07)},check:()=>{if(!this.soundEnabled)return;const o=t.createOscillator(),s=t.createGain();o.connect(s),s.connect(t.destination),o.frequency.setValueAtTime(600,t.currentTime),o.frequency.setValueAtTime(800,t.currentTime+.05),o.frequency.exponentialRampToValueAtTime(600,t.currentTime+.15),s.gain.setValueAtTime(.1,t.currentTime),s.gain.exponentialRampToValueAtTime(.01,t.currentTime+.15),o.start(t.currentTime),o.stop(t.currentTime+.15)},victory:()=>{if(!this.soundEnabled)return;[523,659,784,1047].forEach((s,a)=>{setTimeout(()=>{const i=t.createOscillator(),r=t.createGain();i.connect(r),r.connect(t.destination),i.frequency.setValueAtTime(s,t.currentTime),r.gain.setValueAtTime(.08,t.currentTime),r.gain.exponentialRampToValueAtTime(.01,t.currentTime+.3),i.start(t.currentTime),i.stop(t.currentTime+.3)},a*150)})}}}return{move:()=>{},capture:()=>{},check:()=>{},victory:()=>{}}}getPieceSymbol(e){return e?{white:{king:"♚",queen:"♛",rook:"♜",bishop:"♝",knight:"♞",pawn:"♟"},black:{king:"♔",queen:"♕",rook:"♖",bishop:"♗",knight:"♘",pawn:"♙"}}[e.color][e.type]:""}isValidPosition(e,t){return e>=0&&e<8&&t>=0&&t<8}getPossibleMoves(e,t){const o=this.board[e][t];if(!o||o.color!==this.currentPlayer)return[];let s=[];switch(o.type){case"pawn":s=this.getPawnMoves(e,t);break;case"rook":s=this.getRookMoves(e,t);break;case"knight":s=this.getKnightMoves(e,t);break;case"bishop":s=this.getBishopMoves(e,t);break;case"queen":s=this.getQueenMoves(e,t);break;case"king":s=this.getKingMoves(e,t);break}return s.filter(a=>!this.wouldBeInCheck(e,t,a.row,a.col))}getPawnMoves(e,t){const o=[],s=this.board[e][t],a=s.color==="white"?-1:1,i=s.color==="white"?6:1;this.isValidPosition(e+a,t)&&!this.board[e+a][t]&&(o.push({row:e+a,col:t}),e===i&&!this.board[e+2*a][t]&&o.push({row:e+2*a,col:t}));for(const r of[-1,1]){const l=e+a,c=t+r;if(this.isValidPosition(l,c)){const u=this.board[l][c];u&&u.color!==s.color&&o.push({row:l,col:c}),this.enPassantTarget&&this.enPassantTarget.row===l&&this.enPassantTarget.col===c&&o.push({row:l,col:c,enPassant:!0})}}return o}getRookMoves(e,t){const o=[],s=[[0,1],[0,-1],[1,0],[-1,0]];for(const[a,i]of s)for(let r=1;r<8;r++){const l=e+r*a,c=t+r*i;if(!this.isValidPosition(l,c))break;const u=this.board[l][c];if(!u)o.push({row:l,col:c});else{u.color!==this.board[e][t].color&&o.push({row:l,col:c});break}}return o}getKnightMoves(e,t){const o=[],s=[[-2,-1],[-2,1],[-1,-2],[-1,2],[1,-2],[1,2],[2,-1],[2,1]];for(const[a,i]of s){const r=e+a,l=t+i;if(this.isValidPosition(r,l)){const c=this.board[r][l];(!c||c.color!==this.board[e][t].color)&&o.push({row:r,col:l})}}return o}getBishopMoves(e,t){const o=[],s=[[1,1],[1,-1],[-1,1],[-1,-1]];for(const[a,i]of s)for(let r=1;r<8;r++){const l=e+r*a,c=t+r*i;if(!this.isValidPosition(l,c))break;const u=this.board[l][c];if(!u)o.push({row:l,col:c});else{u.color!==this.board[e][t].color&&o.push({row:l,col:c});break}}return o}getQueenMoves(e,t){return[...this.getRookMoves(e,t),...this.getBishopMoves(e,t)]}getKingMoves(e,t){const o=[],s=[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]];for(const[i,r]of s){const l=e+i,c=t+r;if(this.isValidPosition(l,c)){const u=this.board[l][c];(!u||u.color!==this.board[e][t].color)&&o.push({row:l,col:c})}}const a=this.board[e][t].color;return this.castlingRights[a].kingside&&this.canCastle(e,t,!0)&&o.push({row:e,col:t+2,castle:"kingside"}),this.castlingRights[a].queenside&&this.canCastle(e,t,!1)&&o.push({row:e,col:t-2,castle:"queenside"}),o}canCastle(e,t,o){const s=o?7:0,a=o?1:-1,i=Math.min(t,s)+1,r=Math.max(t,s);for(let l=i;l<r;l++)if(this.board[e][l])return!1;for(let l=0;l<=2;l++)if(this.isSquareAttacked(e,t+l*a,this.currentPlayer==="white"?"black":"white"))return!1;return!0}isSquareAttacked(e,t,o){for(let s=0;s<8;s++)for(let a=0;a<8;a++){const i=this.board[s][a];if(i&&i.color===o&&this.getPieceAttacks(s,a).some(l=>l.row===e&&l.col===t))return!0}return!1}getPieceAttacks(e,t){const o=this.board[e][t];if(!o)return[];switch(o.type){case"pawn":return this.getPawnAttacks(e,t);case"rook":return this.getRookMoves(e,t);case"knight":return this.getKnightMoves(e,t);case"bishop":return this.getBishopMoves(e,t);case"queen":return this.getQueenMoves(e,t);case"king":return this.getKingAttacks(e,t);default:return[]}}getPawnAttacks(e,t){const o=[],a=this.board[e][t].color==="white"?-1:1;for(const i of[-1,1]){const r=e+a,l=t+i;this.isValidPosition(r,l)&&o.push({row:r,col:l})}return o}getKingAttacks(e,t){const o=[],s=[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]];for(const[a,i]of s){const r=e+a,l=t+i;this.isValidPosition(r,l)&&o.push({row:r,col:l})}return o}wouldBeInCheck(e,t,o,s){const a=this.board[o][s],i=this.board[e][t];this.board[o][s]=i,this.board[e][t]=null;let r,l;for(let u=0;u<8;u++)for(let p=0;p<8;p++){const f=this.board[u][p];if(f&&f.type==="king"&&f.color===this.currentPlayer){r=u,l=p;break}}const c=this.isSquareAttacked(r,l,this.currentPlayer==="white"?"black":"white");return this.board[e][t]=i,this.board[o][s]=a,c}makeMove(e,t,o,s){const a=this.board[e][t],i=this.board[o][s];n.info("MOVE",`Attempting move: ${a.type} from (${e},${t}) to (${o},${s})`,{piece:a.type,color:a.color,from:`${e},${t}`,to:`${o},${s}`,capturedPiece:i?i.type:null,currentPlayer:this.currentPlayer});const r=this.getPossibleMoves(e,t).find(m=>m.row===o&&m.col===s);if(!r)return n.warn("MOVE","Invalid move attempted - no valid move found",{from:`${e},${t}`,to:`${o},${s}`,piece:a.type}),!1;let l=!1,c=!1;if(this.board[o][s]=a,this.board[e][t]=null,r.enPassant){const m=this.currentPlayer==="white"?o+1:o-1;this.board[m][s]=null}if(r.castle){const m=r.castle==="kingside"?7:0,v=r.castle==="kingside"?s-1:s+1;this.board[o][v]=this.board[o][m],this.board[o][m]=null}this.enPassantTarget=null,a.type==="pawn"&&Math.abs(o-e)===2&&(this.enPassantTarget={row:(e+o)/2,col:s}),a.type==="king"?(this.castlingRights[a.color].kingside=!1,this.castlingRights[a.color].queenside=!1):a.type==="rook"&&(t===0&&(this.castlingRights[a.color].queenside=!1),t===7&&(this.castlingRights[a.color].kingside=!1)),a.type==="pawn"&&(o===0||o===7)&&(this.board[o][s]={type:"queen",color:a.color}),this.currentPlayer=this.currentPlayer==="white"?"black":"white",this.updateGameStatus(),l=this.gameStatus==="check",c=this.gameStatus==="checkmate";const u=this.generateMoveNotation(e,t,o,s,a,i,l,c),p=this.generateMoveCommentary(e,t,o,s,a,i,r.enPassant?"enPassant":r.castle?r.castle:null);this.currentMoveIndex!==void 0&&this.currentMoveIndex<this.moveHistory.length-1&&(this.moveHistory=this.moveHistory.slice(0,this.currentMoveIndex+1));const f=Math.ceil((this.moveHistory.length+1)/2),y=this.gameMode==="human-vs-bot"&&!this.isUndoRedoAction&&(this.humanColor==="white"&&a.color==="black"||this.humanColor==="black"&&a.color==="white"),b={from:{row:e,col:t},to:{row:o,col:s},piece:{...a},captured:i?{...i}:null,special:r.enPassant?"enPassant":r.castle?r.castle:null,notation:u,commentary:p,moveNumber:f,player:a.color,timestamp:new Date().toISOString(),isBotMove:y,gameMode:this.gameMode,boardStateHash:this.calculateBoardStateHash(),castlingRights:JSON.parse(JSON.stringify(this.castlingRights)),enPassantTarget:this.enPassantTarget?{...this.enPassantTarget}:null};return this.moveHistory.push(b),this.currentMoveIndex=this.moveHistory.length-1,n.debug("MOVE","Move recorded in history with enhanced tracking",{moveIndex:this.currentMoveIndex,moveNumber:f,totalMovesInHistory:this.moveHistory.length,notation:u,isBotMove:y,boardStateHash:b.boardStateHash}),c?(this.sounds.victory(),n.info("MOVE","Checkmate achieved - Victory sound played")):l?(this.sounds.check(),n.info("MOVE","Check detected - Check sound played")):i?(this.sounds.capture(),n.info("MOVE",`Piece captured: ${i.type} - Capture sound played`)):(this.sounds.move(),n.debug("MOVE","Regular move - Move sound played")),n.info("MOVE","Move completed successfully",{moveNotation:u,gameStatus:this.gameStatus,moveNumber:Math.ceil(this.moveHistory.length/2),nextPlayer:this.currentPlayer,totalMoves:this.moveHistory.length}),this.autoSave(),!0}updateGameStatus(){const e=this.hasValidMoves(),t=this.isInCheck();e?t?this.gameStatus="check":this.gameStatus="playing":this.gameStatus=t?"checkmate":"stalemate"}hasValidMoves(){for(let e=0;e<8;e++)for(let t=0;t<8;t++){const o=this.board[e][t];if(o&&o.color===this.currentPlayer&&this.getPossibleMoves(e,t).length>0)return!0}return!1}isInCheck(){for(let e=0;e<8;e++)for(let t=0;t<8;t++){const o=this.board[e][t];if(o&&o.type==="king"&&o.color===this.currentPlayer)return this.isSquareAttacked(e,t,this.currentPlayer==="white"?"black":"white")}return!1}newGame(){n.info("GAME","Starting new game - Resetting all game state"),this.board=this.initializeBoard(),this.selectedSquare=null,this.gameStatus="playing",this.moveHistory=[],this.currentMoveIndex=void 0,this.enPassantTarget=null,this.castlingRights={white:{kingside:!0,queenside:!0},black:{kingside:!0,queenside:!0}},this.isUndoRedoAction=!1,this.gameMode==="human-vs-bot"?(this.humanColor==="random"&&(this.humanColor=Math.random()<.5?"white":"black",n.info("GAME",`Random color selected: ${this.humanColor}`)),this.currentPlayer="white",this.boardFlipped=!1):this.gameMode==="human-vs-human"&&(this.currentPlayer="white",this.boardFlipped=!1),n.info("GAME","New game state initialized",{currentPlayer:this.currentPlayer,gameStatus:this.gameStatus,moveHistoryLength:this.moveHistory.length,currentMoveIndex:this.currentMoveIndex,gameMode:this.gameMode,humanColor:this.humanColor,boardFlipped:this.boardFlipped,castlingRights:this.castlingRights}),this.autoSave()}setGameMode(e){return e!=="human-vs-human"&&e!=="human-vs-bot"?(n.error("GAME",`Invalid game mode: ${e}`),!1):(this.gameMode=e,n.info("GAME",`Game mode changed to: ${e}`),e==="human-vs-bot"&&(this.boardFlipped=!1),!0)}setHumanColor(e){return e!=="white"&&e!=="black"&&e!=="random"?(n.error("GAME",`Invalid human color: ${e}`),!1):(this.humanColor=e,n.info("GAME",`Human color set to: ${e}`),!0)}getGameMode(){return this.gameMode}getHumanColor(){return this.humanColor}shouldFlipBoard(){return this.gameMode==="human-vs-human"&&this.boardFlipped}setCorrectBoardPerspective(){if(this.gameMode==="human-vs-bot"){this.boardFlipped=this.humanColor==="black",n.info("GAME","Board perspective set for vs Bot mode",{humanColor:this.humanColor,boardFlipped:this.boardFlipped,staticPerspective:!0});return}if(this.gameMode!=="human-vs-human"){this.boardFlipped=!1;return}const e=this.currentPlayer==="black";this.boardFlipped!==e&&(this.boardFlipped=e,n.info("GAME",`Board perspective corrected for ${this.currentPlayer} player`,{boardFlipped:this.boardFlipped,isUndoRedo:this.isUndoRedoAction}))}getStorageKey(){return`chess_game_state_${this.gameMode.replace("-","_")}`}getColorOptions(){return[{value:"white",label:"Play as White"},{value:"black",label:"Play as Black"},{value:"random",label:"Random Color"}]}getGameModeOptions(){return[{value:"human-vs-bot",label:"Human vs Bot"},{value:"human-vs-human",label:"Human vs Human"}]}isHumanTurn(){return this.gameMode==="human-vs-human"?!0:this.currentPlayer===this.humanColor}isBotTurn(){return this.gameMode==="human-vs-human"?!1:this.currentPlayer!==this.humanColor}getGameModeDisplayText(){return this.gameMode==="human-vs-human"?"Human vs Human":`Human (${this.humanColor==="white"?"White":"Black"}) vs Bot`}generateBotMove(){if(this.gameMode!=="human-vs-bot"||!this.isBotTurn())return null;const e=this.currentPlayer,t=e==="white"?"black":"white";n.info("BOT",`Generating strategic move for bot (${e})`);const o=[];for(let i=0;i<8;i++)for(let r=0;r<8;r++){const l=this.board[i][r];if(l&&l.color===e){const c=this.getPossibleMoves(i,r);for(const u of c)o.push({from:{row:i,col:r},to:{row:u.row,col:u.col},piece:l,capturedPiece:this.board[u.row][u.col],score:0})}}if(o.length===0)return n.warn("BOT","No moves available for bot"),null;for(const i of o)i.score=this.evaluateMove(i,e,t);o.sort((i,r)=>r.score-i.score);const s=o.filter(i=>i.score>=o[0].score*.8),a=s[Math.floor(Math.random()*Math.min(3,s.length))];return n.info("BOT","Strategic move selected",{piece:a.piece.type,from:a.from,to:a.to,score:a.score,topMovesCount:s.length}),a}evaluateMove(e,t,o){let s=0;const a=this.board[e.to.row][e.to.col];this.board[e.to.row][e.to.col]=e.piece,this.board[e.from.row][e.from.col]=null;const i=this.getGamePhase(),r=this.getPhaseMultiplier(i);if(e.capturedPiece){const m=this.getPieceValue(e.capturedPiece),v=this.getPieceValue(e.piece);s+=m*10,m>v?s+=(m-v)*15:m<v&&this.isPieceDefended(e.to.row,e.to.col,o)&&(s-=(v-m)*12),n.debug("BOT",`Enhanced capture evaluation: +${m*10}, exchange bonus/penalty applied`)}const l=this.evaluateTacticalThreats(e,t,o);s+=l;const c=this.evaluateStrategicPositioning(e,i,t);s+=c*r;const u=this.evaluateKingSafety(e,t,o,i);s+=u;const p=this.evaluatePieceCoordination(e,t);s+=p;const f=this.evaluatePawnStructure(e,t);s+=f;const y=this.evaluateDefensiveValue(e,t,o);s+=y;const b=this.evaluateAdvancedPositional(e,t,i);return s+=b,this.board[e.from.row][e.from.col]=e.piece,this.board[e.to.row][e.to.col]=a,n.debug("BOT",`Move evaluation complete: ${e.piece.type} ${e.from.row},${e.from.col} -> ${e.to.row},${e.to.col} = ${Math.round(s)}`),Math.round(s)}getCenterControlBonus(e,t){const o=[[3,3],[3,4],[4,3],[4,4]],s=[[2,2],[2,3],[2,4],[2,5],[3,2],[3,5],[4,2],[4,5],[5,2],[5,3],[5,4],[5,5]];return o.some(([a,i])=>a===e&&i===t)?15:s.some(([a,i])=>a===e&&i===t)?8:0}getDevelopmentBonus(e){if(e.piece.type==="knight"||e.piece.type==="bishop"){const t=e.piece.color==="white"?7:0;if(e.from.row===t)return 12}return 0}getKingSafetyBonus(e){const t=e==="white"?"white":"black";return this.castlingRights[t].kingside||this.castlingRights[t].queenside?5:0}getMobilityBonus(e,t){return{queen:3,rook:2,bishop:2,knight:2,pawn:1,king:0}[e.piece.type]||0}isPieceHanging(e,t,o){const s=o==="white"?"black":"white";for(let a=0;a<8;a++)for(let i=0;i<8;i++){const r=this.board[a][i];if(r&&r.color===s&&this.getPossibleMoves(a,i).some(c=>c.row===e&&c.col===t))return!0}return!1}getPositionalBonus(e){let t=0;switch(e.piece.type){case"pawn":const o=e.piece.color==="white"?7-e.to.row:e.to.row;t+=o*2,this.isPassedPawn(e.to.row,e.to.col,e.piece.color)&&(t+=15);break;case"knight":t+=this.getCenterControlBonus(e.to.row,e.to.col)*.5;break;case"bishop":this.isOnLongDiagonal(e.to.row,e.to.col)&&(t+=8);break;case"rook":this.isOpenFile(e.to.col)&&(t+=10);break}return t}isPassedPawn(e,t,o){const s=o==="white"?-1:1,a=e+s,i=o==="white"?0:7;for(let r=a;r!==i+s&&!(r<0||r>7);r+=s)for(let l=Math.max(0,t-1);l<=Math.min(7,t+1);l++){const c=this.board[r][l];if(c&&c.type==="pawn"&&c.color!==o)return!1}return!0}isOnLongDiagonal(e,t){return e===t||e+t===7}isOpenFile(e){for(let t=0;t<8;t++){const o=this.board[t][e];if(o&&o.type==="pawn")return!1}return!0}getPieceValue(e){return e&&{pawn:1,knight:3,bishop:3,rook:5,queen:9,king:100}[e.type]||0}getGamePhase(){const e=this.countTotalPieces();return this.moveHistory.length<20&&e>28?"opening":e>14?"middlegame":"endgame"}getPhaseMultiplier(e){switch(e){case"opening":return 1.2;case"middlegame":return 1;case"endgame":return .8;default:return 1}}countTotalPieces(){let e=0;for(let t=0;t<8;t++)for(let o=0;o<8;o++)this.board[t][o]&&e++;return e}evaluateTacticalThreats(e,t,o){let s=0;this.isPlayerInCheck(o)&&(s+=50,n.debug("BOT","Check bonus: +50"),this.isCheckmate(o)&&(s+=1e3,n.debug("BOT","Checkmate bonus: +1000")));const a=this.detectForkTargets(e.to.row,e.to.col,e.piece,o);if(a.length>1){const i=a.reduce((r,l)=>r+this.getPieceValue(l),0);s+=i*8,n.debug("BOT",`Fork bonus: +${i*8} (${a.length} targets)`)}return this.createsPinAfterMove(e,t,o)&&(s+=25,n.debug("BOT","Pin bonus: +25")),s}evaluateStrategicPositioning(e,t,o){let s=0;switch(t){case"opening":s+=this.getCenterControlBonus(e.to.row,e.to.col)*1.5,s+=this.getDevelopmentBonus(e),e.piece.type==="king"&&Math.abs(e.to.col-e.from.col)===2&&(s+=30);break;case"middlegame":s+=this.getMobilityBonus(e,o)*2,s+=this.getPositionalBonus(e),s+=this.evaluatePieceActivity(e.to.row,e.to.col,e.piece,o);break;case"endgame":if(e.piece.type==="king"&&(s+=this.getKingActivityBonus(e.to.row,e.to.col,o)*2),e.piece.type==="pawn"){const a=o==="white"?e.to.row:7-e.to.row;s+=(7-a)*5}break}return s}evaluateKingSafety(e,t,o,s){let a=0;const i=this.findKing(t),r=this.findKing(o);if(!i||!r)return 0;if(s!=="endgame"){const l=t;(this.castlingRights[l].kingside||this.castlingRights[l].queenside)&&(a+=15),e.piece.type==="king"&&this.isSquareAttacked(e.to.row,e.to.col,o)&&(a-=30)}else e.piece.type==="king"&&(a+=this.getKingActivityBonus(e.to.row,e.to.col,t));return a}evaluatePieceCoordination(e,t){let o=0;const s=this.countSupportedPieces(e.to.row,e.to.col,t);return o+=s*3,this.isPieceDefended(e.to.row,e.to.col,t)&&(o+=5),o}detectForkTargets(e,t,o,s){const a=[],i=this.getPossibleMovesForPieceAt(e,t,o);for(const r of i){const l=this.board[r.row][r.col];l&&l.color===s&&this.getPieceValue(l)>=3&&a.push(l)}return a}createsPinAfterMove(e,t,o){const s=this.getPieceAttackDirections(e.piece);for(const[a,i]of s){let r=e.to.row+a,l=e.to.col+i,c=null;for(;r>=0&&r<8&&l>=0&&l<8;){const u=this.board[r][l];if(u)if(u.color===o&&!c)c=u;else{if(u.color===o&&c&&this.getPieceValue(u)>this.getPieceValue(c))return!0;break}r+=a,l+=i}}return!1}evaluatePieceActivity(e,t,o,s){return this.getPossibleMovesForPieceAt(e,t,o).length*2}getKingActivityBonus(e,t,o){const s=Math.abs(e-3.5)+Math.abs(t-3.5);return Math.max(0,10-s*2)}findKing(e){for(let t=0;t<8;t++)for(let o=0;o<8;o++){const s=this.board[t][o];if(s&&s.type==="king"&&s.color===e)return{row:t,col:o}}return null}countSupportedPieces(e,t,o){let s=0;const a=this.getPossibleMovesForPieceAt(e,t,this.board[e][t]);for(const i of a){const r=this.board[i.row][i.col];r&&r.color===o&&s++}return s}getPieceAttackDirections(e){switch(e.type){case"rook":return[[0,1],[0,-1],[1,0],[-1,0]];case"bishop":return[[1,1],[1,-1],[-1,1],[-1,-1]];case"queen":return[[0,1],[0,-1],[1,0],[-1,0],[1,1],[1,-1],[-1,1],[-1,-1]];default:return[]}}getPossibleMovesForPieceAt(e,t,o){const s=this.board[e][t];this.board[e][t]=o;const a=this.getPossibleMoves(e,t);return this.board[e][t]=s,a}evaluatePawnStructure(e,t){return e.piece.type==="pawn"?this.getPositionalBonus(e)*.5:0}evaluateDefensiveValue(e,t,o){let s=0;return this.blocksCheck(e,t)&&(s+=20),s}evaluateAdvancedPositional(e,t,o){return this.getPositionalBonus(e)*(o==="middlegame"?1.2:1)}blocksCheck(e,t){if(!this.findKing(t))return!1;const s=this.board[e.to.row][e.to.col];this.board[e.to.row][e.to.col]=e.piece,this.board[e.from.row][e.from.col]=null;const a=!this.isPlayerInCheck(t);return this.board[e.from.row][e.from.col]=e.piece,this.board[e.to.row][e.to.col]=s,a}calculateBoardStateHash(){let e="";for(let t=0;t<8;t++)for(let o=0;o<8;o++){const s=this.board[t][o];s&&(e+=`${s.type[0]}${s.color[0]}${t}${o}`)}return e+=this.currentPlayer[0],e+=this.enPassantTarget?`ep${this.enPassantTarget.row}${this.enPassantTarget.col}`:"",e}async executeBotMove(){if(this.gameMode!=="human-vs-bot"||!this.isBotTurn())return!1;const e=Date.now(),t=this.generateBotMove();if(!t)return n.error("BOT","Failed to generate bot move"),!1;const o=Date.now()-e;n.info("BOT",`Bot thinking completed in ${o}ms`);const s=this.calculateBotDelay(t),a=s+Math.random()*800,i=Math.max(200,a-o);n.info("BOT",`Bot will move in ${i}ms`,{baseDelay:s,naturalDelay:Math.round(a),thinkingTime:o,finalDelay:Math.round(i)}),await new Promise(c=>setTimeout(c,i)),n.info("BOT","Executing strategic bot move",{piece:t.piece.type,from:t.from,to:t.to,score:t.score});const r=this.isUndoRedoAction;this.isUndoRedoAction=!1;const l=this.makeMove(t.from.row,t.from.col,t.to.row,t.to.col);return this.isUndoRedoAction=r,l?n.info("BOT","Strategic bot move executed and recorded successfully",{moveHistoryLength:this.moveHistory.length,currentMoveIndex:this.currentMoveIndex}):n.error("BOT","Bot move execution failed"),l}calculateBotDelay(e){let t=800;return e.capturedPiece&&(t+=400),e.score>50&&(t+=600),this.moveHistory.length<6&&(t*=.7),this.countPieces()<=12&&(t*=1.4),Math.min(t,2500)}countPieces(){let e=0;for(let t=0;t<8;t++)for(let o=0;o<8;o++)this.board[t][o]&&e++;return e}getGameState(){n.debug("SERIALIZATION","Creating comprehensive game state for serialization");const e=this.board.map(i=>i.map(r=>r?{type:r.type,color:r.color,hasMoved:r.hasMoved||!1}:null)),t=this.moveHistory.map((i,r)=>({from:{row:i.from.row,col:i.from.col},to:{row:i.to.row,col:i.to.col},piece:{type:i.piece.type,color:i.piece.color,hasMoved:i.piece.hasMoved||!1},captured:i.captured?{type:i.captured.type,color:i.captured.color,hasMoved:i.captured.hasMoved||!1}:null,special:i.special||null,notation:i.notation||"",commentary:i.commentary||"",moveNumber:i.moveNumber||Math.ceil((r+1)/2),player:i.player||i.piece.color,timestamp:i.timestamp||new Date().toISOString(),moveIndex:r})),o={white:{kingside:!!this.castlingRights.white.kingside,queenside:!!this.castlingRights.white.queenside},black:{kingside:!!this.castlingRights.black.kingside,queenside:!!this.castlingRights.black.queenside}},s=this.getCurrentMoveIndex(),a={board:e,currentPlayer:this.currentPlayer,gameStatus:this.gameStatus,moveHistory:t,currentMoveIndex:this.currentMoveIndex,enPassantTarget:this.enPassantTarget?{row:this.enPassantTarget.row,col:this.enPassantTarget.col}:null,castlingRights:o,soundEnabled:!!this.soundEnabled,allowUndo:!!this.allowUndo,theme:this.theme||"classic",gameMode:this.gameMode||"human-vs-bot",humanColor:this.humanColor||"white",boardFlipped:!!this.boardFlipped,totalMoves:this.moveHistory.length,currentMoveNumber:s>=0?Math.ceil((s+1)/2):0,serializationVersion:"2.0",serializationTimestamp:new Date().toISOString(),boardChecksum:this.calculateBoardChecksum(e),moveHistoryChecksum:this.calculateMoveHistoryChecksum(t),gameStartTime:this.gameStartTime||new Date().toISOString(),lastMoveTime:t.length>0?t[t.length-1].timestamp:null,stateValid:this.validateGameState(),selectedSquare:null};return n.debug("SERIALIZATION","Game state serialization complete",{boardChecksum:a.boardChecksum,moveHistoryChecksum:a.moveHistoryChecksum,totalMoves:a.totalMoves,currentMoveNumber:a.currentMoveNumber,serializationVersion:a.serializationVersion,stateValid:a.stateValid}),a}calculateBoardChecksum(e){const t=JSON.stringify(e,(o,s)=>s===null?"null":typeof s=="object"?`${s.type}-${s.color}-${s.hasMoved}`:s);return k(t)}calculateMoveHistoryChecksum(e){const t=JSON.stringify(e,(o,s)=>o==="timestamp"?"timestamp":s);return k(t)}loadGameState(e){var o;n.info("GAME","Loading enhanced game state into ChessGame instance",{totalMoves:e.totalMoves||((o=e.moveHistory)==null?void 0:o.length)||0,currentMoveNumber:e.currentMoveNumber||0,currentPlayer:e.currentPlayer,gameStatus:e.gameStatus,serializationVersion:e.serializationVersion||"legacy",hasChecksums:!!(e.boardChecksum&&e.moveHistoryChecksum)});const t=JSON.parse(JSON.stringify(e));if(this.board=e.board.map(s=>s.map(a=>a?{type:a.type,color:a.color,hasMoved:a.hasMoved!==void 0?a.hasMoved:!1}:null)),this.currentPlayer=e.currentPlayer,this.gameStatus=e.gameStatus||"playing",this.moveHistory=(e.moveHistory||[]).map((s,a)=>({from:{row:s.from.row,col:s.from.col},to:{row:s.to.row,col:s.to.col},piece:{type:s.piece.type,color:s.piece.color,hasMoved:s.piece.hasMoved!==void 0?s.piece.hasMoved:!1},captured:s.captured?{type:s.captured.type,color:s.captured.color,hasMoved:s.captured.hasMoved!==void 0?s.captured.hasMoved:!1}:null,special:s.special||null,notation:s.notation||"",commentary:s.commentary||"",moveNumber:s.moveNumber||Math.ceil((a+1)/2),player:s.player||s.piece.color,timestamp:s.timestamp||new Date().toISOString(),moveIndex:s.moveIndex!==void 0?s.moveIndex:a})),this.currentMoveIndex=e.currentMoveIndex,this.enPassantTarget=e.enPassantTarget?{row:e.enPassantTarget.row,col:e.enPassantTarget.col}:null,this.castlingRights=e.castlingRights?{white:{kingside:!!e.castlingRights.white.kingside,queenside:!!e.castlingRights.white.queenside},black:{kingside:!!e.castlingRights.black.kingside,queenside:!!e.castlingRights.black.queenside}}:{white:{kingside:!0,queenside:!0},black:{kingside:!0,queenside:!0}},this.theme=e.theme||"classic",this.soundEnabled=e.soundEnabled!==void 0?!!e.soundEnabled:!0,this.allowUndo=e.allowUndo!==void 0?!!e.allowUndo:!0,this.gameStartTime=e.gameStartTime||new Date().toISOString(),this.selectedSquare=null,this.gameMode=e.gameMode||"human-vs-bot",this.humanColor=e.humanColor||"white",this.boardFlipped=e.boardFlipped!==void 0?!!e.boardFlipped:!1,this.isUndoRedoAction=!1,e.boardChecksum&&e.moveHistoryChecksum){const s=this.calculateBoardChecksum(this.board),a=this.calculateMoveHistoryChecksum(this.moveHistory);s!==e.boardChecksum?n.error("GAME","Board checksum mismatch after loading",{expected:e.boardChecksum,actual:s}):n.debug("GAME","Board checksum validation passed"),a!==e.moveHistoryChecksum?n.error("GAME","Move history checksum mismatch after loading",{expected:e.moveHistoryChecksum,actual:a}):n.debug("GAME","Move history checksum validation passed")}if(n.info("GAME","Game state loaded successfully",{restoredMoves:this.moveHistory.length,currentMoveIndex:this.currentMoveIndex,currentPlayer:this.currentPlayer,gameStatus:this.gameStatus,gameStartTime:this.gameStartTime,serializationVersion:e.serializationVersion||"legacy"}),this.validateGameState()?n.info("GAME","Loaded game state passed validation"):n.error("GAME","Loaded game state failed validation - may have integrity issues"),e.serializationVersion){const s=this.getGameState();this.validateStateConsistency(t,s)?n.info("GAME","State consistency validation passed"):n.error("GAME","State consistency validation failed after loading")}}async autoSave(){if(n.debug("SAVE","Auto-save triggered"),!this.validateGameState())return n.error("SAVE","Auto-save aborted: game state validation failed"),!1;try{const e=this.getGameState();if(n.debug("SAVE","Game state prepared for saving",{currentPlayer:e.currentPlayer,gameStatus:e.gameStatus,moveCount:e.moveHistory.length,soundEnabled:e.soundEnabled,allowUndo:e.allowUndo}),!e||typeof e!="object")return n.error("SAVE","Auto-save failed: invalid game state"),console.error("Auto-save failed: invalid game state"),!1;const t=this.getStorageKey();return await A(t,e)?(n.info("SAVE",`Game auto-saved successfully to storage (${t})`),console.log(`Game auto-saved successfully (${this.gameMode})`),!0):(n.error("SAVE","Auto-save failed: storage operation failed"),console.error("Auto-save failed: storage operation failed"),!1)}catch(e){return n.error("SAVE","Auto-save failed with exception",e),console.error("Auto-save failed with exception:",e),!1}}canUndo(){return this.allowUndo&&this.moveHistory.length>0}canRedo(){return this.allowUndo&&this.currentMoveIndex<this.moveHistory.length-1}undoMove(){if(!this.canUndo()||(this.currentMoveIndex===void 0&&(this.currentMoveIndex=this.moveHistory.length-1),this.currentMoveIndex<0))return!1;this.isUndoRedoAction=!0;const e=this.moveHistory[this.currentMoveIndex];if(this.board[e.from.row][e.from.col]=e.piece,this.board[e.to.row][e.to.col]=e.captured,e.special==="enPassant"){const t=e.piece.color==="white"?e.to.row+1:e.to.row-1;this.board[t][e.to.col]=e.captured,this.board[e.to.row][e.to.col]=null}if(e.special==="kingside"||e.special==="queenside"){const t=e.special==="kingside"?e.to.col-1:e.to.col+1,o=e.special==="kingside"?7:0;this.board[e.to.row][o]=this.board[e.to.row][t],this.board[e.to.row][t]=null}return this.currentPlayer=e.piece.color,this.currentMoveIndex--,this.updateGameStatus(),this.setCorrectBoardPerspective(),setTimeout(()=>{this.isUndoRedoAction=!1},100),!0}redoMove(){if(!this.canRedo())return!1;this.isUndoRedoAction=!0,this.currentMoveIndex++;const e=this.moveHistory[this.currentMoveIndex];if(this.board[e.to.row][e.to.col]=e.piece,this.board[e.from.row][e.from.col]=null,e.special==="enPassant"){const t=e.piece.color==="white"?e.to.row+1:e.to.row-1;this.board[t][e.to.col]=null}if(e.special==="kingside"||e.special==="queenside"){const t=e.special==="kingside"?7:0,o=e.special==="kingside"?e.to.col-1:e.to.col+1;this.board[e.to.row][o]=this.board[e.to.row][t],this.board[e.to.row][t]=null}return this.currentPlayer=this.currentPlayer==="white"?"black":"white",this.updateGameStatus(),this.setCorrectBoardPerspective(),setTimeout(()=>{this.isUndoRedoAction=!1},100),!0}getCurrentMoveIndex(){return this.currentMoveIndex!==void 0?this.currentMoveIndex:this.moveHistory.length-1}validateGameState(){n.debug("VALIDATION","Running comprehensive game state validation");const e=[],t=[];if(!this.board||!Array.isArray(this.board)||this.board.length!==8)e.push("Invalid board structure");else for(let s=0;s<8;s++)(!Array.isArray(this.board[s])||this.board[s].length!==8)&&e.push(`Invalid board row ${s}`);if(this.currentPlayer!=="white"&&this.currentPlayer!=="black"&&e.push(`Invalid currentPlayer: ${this.currentPlayer}`),!Array.isArray(this.moveHistory))e.push("Invalid moveHistory structure");else{for(let a=0;a<this.moveHistory.length;a++){const i=this.moveHistory[a];(!i.from||!i.to||!i.piece)&&e.push(`Invalid move at index ${a}: missing required properties`),(typeof i.from.row!="number"||typeof i.from.col!="number"||typeof i.to.row!="number"||typeof i.to.col!="number")&&e.push(`Invalid move at index ${a}: invalid coordinates`),(!i.piece.type||!i.piece.color)&&e.push(`Invalid move at index ${a}: invalid piece data`)}const s=this.moveHistory.length%2===0?"white":"black";(this.currentMoveIndex===void 0||this.currentMoveIndex===this.moveHistory.length-1)&&this.currentPlayer!==s&&t.push(`Player turn inconsistency: expected ${s}, got ${this.currentPlayer}`)}if(this.currentMoveIndex!==void 0&&(this.currentMoveIndex<-1||this.currentMoveIndex>=this.moveHistory.length)&&e.push(`Invalid currentMoveIndex: ${this.currentMoveIndex} (history length: ${this.moveHistory.length})`),(!this.castlingRights||!this.castlingRights.white||!this.castlingRights.black||typeof this.castlingRights.white.kingside!="boolean"||typeof this.castlingRights.white.queenside!="boolean"||typeof this.castlingRights.black.kingside!="boolean"||typeof this.castlingRights.black.queenside!="boolean")&&e.push("Invalid castlingRights structure"),this.enPassantTarget!==null&&this.enPassantTarget!==void 0&&(typeof this.enPassantTarget.row!="number"||typeof this.enPassantTarget.col!="number")&&e.push("Invalid enPassantTarget structure"),["playing","checkmate","stalemate","draw"].includes(this.gameStatus)||e.push(`Invalid gameStatus: ${this.gameStatus}`),this.board&&Array.isArray(this.board)){let s=0,a=0;for(let i=0;i<8;i++)for(let r=0;r<8;r++){const l=this.board[i][r];l&&(l.type==="king"&&(l.color==="white"&&s++,l.color==="black"&&a++),(!l.type||!l.color||l.color!=="white"&&l.color!=="black")&&e.push(`Invalid piece at ${i},${r}: ${JSON.stringify(l)}`))}s!==1&&e.push(`Invalid white king count: ${s} (expected 1)`),a!==1&&e.push(`Invalid black king count: ${a} (expected 1)`)}return t.length>0&&n.warn("VALIDATION","Game state validation warnings",{warnings:t}),e.length>0?(n.error("VALIDATION","Game state validation failed",{issues:e,warnings:t}),!1):(n.debug("VALIDATION","Game state validation passed",{warningCount:t.length,moveHistoryLength:this.moveHistory.length,currentMoveIndex:this.currentMoveIndex,currentPlayer:this.currentPlayer}),!0)}validateStateConsistency(e,t){n.debug("VALIDATION","Validating state consistency between original and loaded data");const o=[];if(e.moveHistory.length!==t.moveHistory.length&&o.push(`Move history length mismatch: original ${e.moveHistory.length}, loaded ${t.moveHistory.length}`),e.currentPlayer!==t.currentPlayer&&o.push(`Current player mismatch: original ${e.currentPlayer}, loaded ${t.currentPlayer}`),e.gameStatus!==t.gameStatus&&o.push(`Game status mismatch: original ${e.gameStatus}, loaded ${t.gameStatus}`),e.board&&t.board)for(let s=0;s<8;s++)for(let a=0;a<8;a++){const i=e.board[s][a],r=t.board[s][a];i===null!=(r===null)?o.push(`Board mismatch at ${s},${a}: null state differs`):i&&r&&(i.type!==r.type||i.color!==r.color)&&o.push(`Board mismatch at ${s},${a}: piece differs`)}return o.length>0?(n.error("VALIDATION","State consistency validation failed",{issues:o}),!1):(n.info("VALIDATION","State consistency validation passed"),!0)}async testSaveLoadCycle(){var e;n.info("TEST","Starting comprehensive save/load cycle test");try{const t=this.getGameState();if(n.debug("TEST","Original state captured",{moveCount:t.totalMoves,currentPlayer:t.currentPlayer,boardChecksum:t.boardChecksum,moveHistoryChecksum:t.moveHistoryChecksum}),!await this.autoSave())return n.error("TEST","Save operation failed during test"),!1;const s=await w("chess_game_state");if(!s)return n.error("TEST","Load operation failed - no data returned"),!1;n.debug("TEST","State loaded successfully",{moveCount:s.totalMoves||((e=s.moveHistory)==null?void 0:e.length)||0,currentPlayer:s.currentPlayer,hasIntegrityData:!!(s.boardChecksum&&s.moveHistoryChecksum)});const a=this.validateStateConsistency(t,s);if(!a)return n.error("TEST","Save/load cycle test failed - state consistency check failed"),!1;const i=new S;if(i.loadGameState(s),!i.validateGameState())return n.error("TEST","Save/load cycle test failed - loaded game state validation failed"),!1;const r=i.getGameState(),l=t.totalMoves===r.totalMoves&&t.currentPlayer===r.currentPlayer&&t.gameStatus===r.gameStatus&&t.moveHistory.length===r.moveHistory.length;return l?(n.info("TEST","Save/load cycle test completed successfully",{originalStateValid:this.validateGameState(),loadedStateValid:i.validateGameState(),consistencyValid:a,metricsMatch:l,totalMoves:t.totalMoves,dataIntegrity:"verified"}),!0):(n.error("TEST","Save/load cycle test failed - key metrics mismatch",{original:{totalMoves:t.totalMoves,currentPlayer:t.currentPlayer,gameStatus:t.gameStatus,moveHistoryLength:t.moveHistory.length},loaded:{totalMoves:r.totalMoves,currentPlayer:r.currentPlayer,gameStatus:r.gameStatus,moveHistoryLength:r.moveHistory.length}}),!1)}catch(t){return n.error("TEST","Save/load cycle test failed with exception",t),!1}}coordsToChessNotation(e,t){const o=["a","b","c","d","e","f","g","h"],s=["8","7","6","5","4","3","2","1"];return o[t]+s[e]}generateMoveNotation(e,t,o,s,a,i,r,l){let c="";return a.type==="king"&&Math.abs(s-t)===2?s>t?"O-O":"O-O-O":(a.type!=="pawn"&&(c+=a.type.charAt(0).toUpperCase(),a.type==="knight"&&(c="N")),a.type==="pawn"&&i&&(c+=this.coordsToChessNotation(e,t).charAt(0)),i&&(c+="x"),c+=this.coordsToChessNotation(o,s),l?c+="#":r&&(c+="+"),c)}generateMoveCommentary(e,t,o,s,a,i,r){const l={king:"King",queen:"Queen",rook:"Rook",bishop:"Bishop",knight:"Knight",pawn:"Pawn"};this.coordsToChessNotation(e,t);const c=this.coordsToChessNotation(o,s);let u="";if(r==="kingside")return"Castles kingside";if(r==="queenside")return"Castles queenside";if(r==="enPassant")return`Pawn takes pawn en passant on ${c}`;const p=l[a.type];if(i){const f=l[i.type];u=`${p} takes ${f} on ${c}`}else u=`${p} to ${c}`;return u}calculateMaterialBalance(){const e={pawn:1,knight:3,bishop:3,rook:5,queen:9,king:0};let t=0,o=0;for(let s=0;s<8;s++)for(let a=0;a<8;a++){const i=this.board[s][a];if(i){const r=e[i.type]||0;i.color==="white"?t+=r:o+=r}}return t-o}}let h,g;class M{constructor(e){this.game=e,this.boardElement=document.getElementById("chess-board"),this.currentPlayerElement=document.getElementById("current-player"),this.gameStatusElement=document.getElementById("game-status"),this.isFlipping=!1,this.inputEnabled=!0,this.lastAlertTime=0,this.alertCooldown=1e3,this.initializeBoard(),this.updateDisplay(),this.checkInitialBotTurn()}initializeBoard(){this.boardElement.innerHTML="";for(let e=0;e<8;e++)for(let t=0;t<8;t++){const o=document.createElement("div");o.className="chess-square",o.dataset.row=e,o.dataset.col=t;const s=(e+t)%2===0;o.classList.add(s?"light-square":"dark-square"),o.addEventListener("click",a=>this.handleSquareClick(a)),o.addEventListener("touchstart",a=>this.handleTouchStart(a)),o.addEventListener("touchend",a=>this.handleTouchEnd(a)),o.addEventListener("touchcancel",a=>this.handleTouchCancel(a)),this.boardElement.appendChild(o)}this.applyTheme()}handleSquareClick(e){const t=parseInt(e.target.dataset.row),o=parseInt(e.target.dataset.col);this.handleSquareSelection(t,o)}handleTouchStart(e){e.preventDefault(),this.touchStartTime=Date.now(),this.touchTarget=e.target,e.target.style.opacity="0.7"}handleTouchEnd(e){if(e.preventDefault(),this.touchTarget&&(this.touchTarget.style.opacity=""),this.touchStartTime&&Date.now()-this.touchStartTime<500){let t=e.target;for(;t&&!t.dataset.row;)t=t.parentElement;if(t&&t.dataset.row!==void 0){const o=parseInt(t.dataset.row),s=parseInt(t.dataset.col);this.handleSquareSelection(o,s)}}this.touchStartTime=null,this.touchTarget=null}handleTouchCancel(e){e.preventDefault(),this.touchTarget&&(this.touchTarget.style.opacity=""),this.touchStartTime=null,this.touchTarget=null}getLogicalCoordinates(e,t){return this.game.shouldFlipBoard()?{row:7-e,col:7-t}:{row:e,col:t}}getDisplayCoordinates(e,t){return this.game.shouldFlipBoard()?{row:7-e,col:7-t}:{row:e,col:t}}flipBoard(e){this.isFlipping||(this.isFlipping=!0,n.info("UI","Starting board flip animation"),this.boardElement.style.transform="rotateY(90deg)",this.boardElement.style.transition="transform 0.3s ease-in-out",setTimeout(()=>{this.game.boardFlipped=!this.game.boardFlipped,this.updateDisplay(),this.boardElement.style.transform="rotateY(0deg)",setTimeout(()=>{this.boardElement.style.transition="",this.isFlipping=!1,n.info("UI","Board flip animation completed"),e&&e()},150)},150))}updateBoardPerspective(){if(this.isFlipping)return;const e=this.game.boardFlipped,t=this.boardElement.classList.contains("flipped");n.info("UI","Updating board perspective without animation",{currentFlipState:e,wasFlipped:t,gameMode:this.game.gameMode,currentPlayer:this.game.currentPlayer,isUndoRedo:this.game.isUndoRedoAction}),e&&!t?this.boardElement.classList.add("flipped"):!e&&t&&this.boardElement.classList.remove("flipped"),this.updateDisplay()}async handleBotTurn(){const e=this.game.gameMode,t=this.game.isBotTurn(),o=this.game.gameStatus,s=this.game.currentPlayer,a=this.game.getHumanColor();if(n.info("BOT_ACTIVATION","Bot turn handler called",{gameMode:e,isBotTurn:t,gameStatus:o,currentPlayer:s,humanColor:a,moveHistoryLength:this.game.moveHistory.length}),e!=="human-vs-bot"){n.warn("BOT_ACTIVATION","Not in vs Bot mode, exiting");return}if(!t){n.warn("BOT_ACTIVATION","Not bot's turn, exiting",{currentPlayer:s,humanColor:a,expectedBotColor:a==="white"?"black":"white"});return}if(o!=="playing"){n.info("BOT_ACTIVATION","Game over, cleaning up bot turn state"),this.showBotThinking(!1),this.setInputEnabled(!1);return}const i=this.game.moveHistory.length===0&&t,r=i?"INITIAL":"SUBSEQUENT";n.info("BOT_ACTIVATION",`Executing ${r} bot move`),this.setInputEnabled(!1),this.showBotThinking(!0),this.updateGameStateIndicators();try{i&&await new Promise(c=>setTimeout(c,500)),await this.game.executeBotMove()?(n.info("BOT_ACTIVATION",`${r} bot move completed successfully`),this.updateDisplay(),this.game.soundEnabled&&this.game.sounds&&this.game.sounds.move.play().catch(()=>{n.debug("BOT_ACTIVATION","Sound playback failed (non-critical)")}),this.showBotThinking(!1),this.game.gameStatus!=="playing"?(n.info("BOT_ACTIVATION","Game ended after bot move"),this.setInputEnabled(!1),this.handleGameEnd()):(this.setInputEnabled(!0),n.info("BOT_ACTIVATION","Bot move complete, human's turn now"))):(n.error("BOT_ACTIVATION",`${r} bot move failed - no valid moves found`),this.showBotThinking(!1),this.showInstructionLabel("Bot move failed - your turn"),this.setInputEnabled(!0),setTimeout(()=>{this.hideInstructionLabel()},3e3))}catch(l){n.error("BOT_ACTIVATION",`Error during ${r} bot turn`,l),this.showBotThinking(!1),this.setInputEnabled(!0),this.showInstructionLabel("Bot error - your turn"),setTimeout(()=>{this.hideInstructionLabel()},3e3)}}setInputEnabled(e){this.inputEnabled=e,e?(this.boardElement.style.opacity="1",this.boardElement.style.pointerEvents="auto"):(this.boardElement.style.opacity="0.7",this.boardElement.style.pointerEvents="none")}showBotThinking(e){const t=this.game.gameMode,o=this.game.isBotTurn(),s=this.game.gameStatus;n.debug("UI_SYNC","Bot thinking indicator update",{show:e,gameMode:t,isBotTurn:o,gameStatus:s,inputEnabled:this.inputEnabled});const a=document.getElementById("instruction-label");e&&t==="human-vs-bot"&&o&&s==="playing"?(this.showInstructionLabel("Bot is thinking..."),a&&a.classList.add("bot-thinking"),this.inputEnabled&&this.setInputEnabled(!1),this.updatePlayerTurnIndicator(this.game.currentPlayer,t)):(this.hideInstructionLabel(),a&&a.classList.remove("bot-thinking"),t==="human-vs-bot"&&this.updatePlayerTurnIndicator(this.game.currentPlayer,t))}handleGameEnd(){const e=this.game.gameStatus,t=this.game.currentPlayer;n.info("UI","Game ended",{status:e,currentPlayer:t}),this.setInputEnabled(!1);let o="",s=!1;if(e==="checkmate"){const a=t==="white"?"Black":"White";this.game.gameMode==="human-vs-bot"?this.game.humanColor==="white"&&a==="White"||this.game.humanColor==="black"&&a==="Black"?(o="Checkmate! You won!",s=!0):(o="Checkmate! Bot won!",s=!1):(o=`Checkmate! ${a} wins!`,s=!0)}else e==="stalemate"?(o="Stalemate! Game is a draw.",s=!1):e==="draw"&&(o="Game is a draw.",s=!1);this.showGameEndMessage(o,s),this.game.soundEnabled&&this.game.sounds&&(s?this.game.sounds.victory():this.game.sounds.gameEnd())}showGameEndMessage(e,t){const o=document.getElementById("instruction-label");o&&(o.textContent=e,o.classList.remove("hidden"),o.classList.add("game-end"),t?o.classList.add("victory"):o.classList.add("defeat"),setTimeout(()=>{o.classList.remove("game-end","victory","defeat")},5e3))}updateGameStateIndicators(){const e=this.game.gameStatus,t=this.game.currentPlayer,o=this.game.gameMode;this.updatePlayerTurnIndicator(t,o),this.updateGameStatusIndicator(e),this.updateMoveHistoryDisplay()}updatePlayerTurnIndicator(e,t){const o=document.getElementById("current-player");if(!o)return;let s="",a=`player-indicator ${e}`;if(t==="human-vs-bot"){const i=this.game.getHumanColor(),r=this.game.isBotTurn(),l=this.game.gameStatus;if(l!=="playing")s=`Game Over (${l})`,a+=" game-ended";else if(r){const c=document.getElementById("instruction-label");c&&!c.classList.contains("hidden")&&c.textContent.includes("Bot is thinking")?(s="Bot is thinking...",a+=" bot-thinking"):(s="Bot's turn",a+=" bot-turn")}else s=`Your turn (${i})`,a+=" human-turn"}else s=`${e.charAt(0).toUpperCase()+e.slice(1)}'s turn`;o.textContent=s,o.className=a,n.debug("UI_SYNC","Turn indicator updated",{message:s,currentPlayer:e,gameMode:t,indicatorClass:a})}updateGameStatusIndicator(e){const t=document.getElementById("game-status");if(!t)return;let o="",s="";switch(e){case"playing":o="In Progress",s="playing";break;case"check":o="Check!",s="check";break;case"checkmate":o="Checkmate!",s="checkmate";break;case"stalemate":o="Stalemate",s="stalemate";break;case"draw":o="Draw",s="draw";break;default:o="Unknown",s="unknown"}t.textContent=o,t.className=`status-indicator ${s}`}updateMoveHistoryDisplay(){const e=document.getElementById("move-history");if(!e||!this.game.moveHistory.length)return;const t=this.game.moveHistory.slice(-6);let o='<div class="move-history-title">Recent Moves:</div>';t.forEach((s,a)=>{const i=s.isBotMove?"bot-move":"human-move",r=s.isBotMove?"🤖":"👤";o+=`
        <div class="move-entry ${i}">
          <span class="move-player">${r}</span>
          <span class="move-notation">${s.notation}</span>
          <span class="move-number">#${s.moveNumber}</span>
        </div>
      `}),e.innerHTML=o}checkInitialBotTurn(){if(this.game.gameMode!=="human-vs-bot"){n.info("BOT_INIT","Not in vs Bot mode, skipping bot turn check");return}const e=this.game.getHumanColor(),t=this.game.currentPlayer,o=this.game.isBotTurn();if(n.info("BOT_INIT","Checking initial bot turn",{humanColor:e,currentPlayer:t,isBotTurn:o,gameStatus:this.game.gameStatus}),this.game.gameStatus!=="playing"){n.warn("BOT_INIT","Game not in playing state, skipping bot turn");return}o?(n.info("BOT_INIT","Bot should make first move - initializing bot turn"),this.showBotThinking(!0),this.setInputEnabled(!1),this.updateGameStateIndicators(),setTimeout(()=>{this.handleBotTurn()},1e3)):(n.info("BOT_INIT","Human goes first - enabling input and waiting for human move"),this.setInputEnabled(!0),this.showBotThinking(!1),this.updateGameStateIndicators())}onNewGameStart(){this.updateDisplay(),this.checkInitialBotTurn()}handleSquareSelection(e,t){if(this.isFlipping||this.inputEnabled===!1)return;if(this.game.gameMode==="human-vs-bot"&&this.game.isBotTurn()){const i=document.getElementById("instruction-label");(!i||i.classList.contains("hidden")||!i.textContent.includes("Bot is thinking"))&&this.showInstructionLabel("Wait for bot's move...");return}const o=this.getLogicalCoordinates(e,t),s=o.row,a=o.col;if(this.game.selectedSquare){const i=this.game.selectedSquare.row,r=this.game.selectedSquare.col;if(i===s&&r===a)this.game.selectedSquare=null;else if(this.game.getPossibleMoves(i,r).find(u=>u.row===s&&u.col===a))this.game.makeMove(i,r,s,a)?(this.game.selectedSquare=null,this.game.gameMode==="human-vs-human"&&!this.game.isUndoRedoAction?setTimeout(()=>{this.flipBoard()},200):this.game.gameMode==="human-vs-bot"&&!this.game.isUndoRedoAction&&(n.info("TURN_EXEC","Human move completed, checking for bot turn",{currentPlayer:this.game.currentPlayer,humanColor:this.game.getHumanColor(),isBotTurn:this.game.isBotTurn(),gameStatus:this.game.gameStatus}),this.game.gameStatus==="playing"&&this.game.isBotTurn()?(n.info("TURN_EXEC","Triggering bot turn after human move"),this.showBotThinking(!0),this.setInputEnabled(!1),this.updateGameStateIndicators(),setTimeout(()=>{this.handleBotTurn()},150)):(n.info("TURN_EXEC","Game ended or not bot turn after human move",{gameStatus:this.game.gameStatus,isBotTurn:this.game.isBotTurn()}),this.game.gameStatus!=="playing"?this.setInputEnabled(!1):this.setInputEnabled(!0)))):this.game.selectedSquare=null;else if(this.game.board[i][r],this.game.wouldBeInCheck(i,r,s,a))this.game.isInCheck()?(this.showCheckAlert("You're in check! Must move to safety."),this.highlightKing(this.game.currentPlayer)):(this.showCheckAlert("Can't move - would put king in check!"),this.highlightKing(this.game.currentPlayer));else{const p=this.game.board[s][a];p&&p.color===this.game.currentPlayer?this.game.selectedSquare={row:s,col:a}:this.game.selectedSquare=null}}else{const i=this.game.board[s][a];i&&i.color===this.game.currentPlayer&&(this.game.selectedSquare={row:s,col:a})}this.updateDisplay()}updateDisplay(){const e=this.boardElement.children;for(let l=0;l<e.length;l++){const c=e[l],u=parseInt(c.dataset.row),p=parseInt(c.dataset.col),f=this.getLogicalCoordinates(u,p),y=this.game.board[f.row][f.col];if(c.innerHTML="",c.classList.remove("selected","valid-move","white-move","black-move","last-move"),y){const m=document.createElement("div");m.className=`chess-piece ${y.color}`,m.textContent=this.game.getPieceSymbol(y),c.appendChild(m)}this.game.selectedSquare&&this.game.selectedSquare.row===f.row&&this.game.selectedSquare.col===f.col&&c.classList.add("selected"),this.game.selectedSquare&&this.game.getPossibleMoves(this.game.selectedSquare.row,this.game.selectedSquare.col).some(v=>v.row===f.row&&v.col===f.col)&&(c.classList.add("valid-move"),c.classList.add(this.game.currentPlayer==="white"?"white-move":"black-move"));const b=this.game.getCurrentMoveIndex();if(b>=0&&this.game.moveHistory.length>0){const m=this.game.moveHistory[b];m&&(m.from.row===f.row&&m.from.col===f.col||m.to.row===f.row&&m.to.col===f.col)&&c.classList.add("last-move")}}const t=this.game.calculateMaterialBalance();let o="";this.game.currentPlayer==="white"?t>0?o=` (+${t})`:t<0&&(o=` (${t})`):t<0?o=` (+${Math.abs(t)})`:t>0&&(o=` (-${t})`),this.currentPlayerElement.textContent=`${this.game.currentPlayer.charAt(0).toUpperCase()+this.game.currentPlayer.slice(1)}'s Move${o}`;const s=this.game.getCurrentMoveIndex(),a=Math.ceil((s+1)/2),i=document.getElementById("move-count");i&&(s>=0?i.textContent=`Move: ${a}`:i.textContent="Move: 0");const r=document.getElementById("last-move");if(r&&s>=0&&this.game.moveHistory.length>0){const l=this.game.moveHistory[s];if(l){const c=l.commentary||l.notation;let u="";this.game.gameStatus==="checkmate"?u=' - <span style="color: #FE5F00; font-weight: bold;">Checkmate!</span>':this.game.gameStatus==="check"?u=' - <span style="color: #FE5F00; font-weight: bold;">Check!</span>':this.game.gameStatus==="stalemate"&&(u=' - <span style="color: #FE5F00; font-weight: bold;">Stalemate!</span>'),r.innerHTML=`${c}${u}`}else r.textContent=""}else r&&(r.textContent="");this.gameStatusElement.textContent="",this.updateGameStateIndicators(),this.game.gameStatus!=="playing"&&this.game.gameStatus!=="check"&&setTimeout(()=>{this.handleGameEnd()},300)}applyTheme(){const e={light:"#ddb88c",dark:"#a0522d",lightTexture:"radial-gradient(circle at 25% 25%, #c9a876 0%, transparent 50%), radial-gradient(circle at 75% 75%, #c9a876 0%, transparent 50%)",darkTexture:"radial-gradient(circle at 25% 25%, #8b4513 0%, transparent 50%), radial-gradient(circle at 75% 75%, #8b4513 0%, transparent 50%)"};document.documentElement.style.setProperty("--light-square",e.light),document.documentElement.style.setProperty("--dark-square",e.dark);const t=this.boardElement.children;for(let o=0;o<t.length;o++){const s=t[o],a=parseInt(s.dataset.row),i=parseInt(s.dataset.col);(a+i)%2===0?(s.style.backgroundColor=e.light,s.style.backgroundImage=e.lightTexture):(s.style.backgroundColor=e.dark,s.style.backgroundImage=e.darkTexture)}}showMessage(e){this.gameStatusElement.textContent=e,setTimeout(()=>{this.updateDisplay()},2e3)}showOptionsMenu(){const e=document.getElementById("options-overlay");if(e){e.classList.remove("hidden");const t=document.getElementById("options-menu");t&&(t.scrollTop=0),this.updateOptionsButtons(),e.dataset.listenersAdded||(this.setupOptionsEventListeners(),e.dataset.listenersAdded="true")}}hideOptionsMenu(){const e=document.getElementById("options-overlay");e&&e.classList.add("hidden")}updateOptionsButtons(){document.querySelectorAll('input[name="gameMode"]').forEach(i=>{i.checked=i.value===this.game.gameMode}),document.querySelectorAll('input[name="playerColor"]').forEach(i=>{i.checked=i.value===this.game.humanColor}),document.querySelectorAll('input[name="soundEffects"]').forEach(i=>{i.checked=i.value==="on"===this.game.soundEnabled}),document.querySelectorAll('input[name="allowUndo"]').forEach(i=>{i.checked=i.value==="on"===this.game.allowUndo});const a=document.getElementById("color-group");a&&(this.game.gameMode==="human-vs-bot"?a.classList.remove("hidden"):a.classList.add("hidden"))}setupOptionsEventListeners(){document.querySelectorAll('input[name="gameMode"]').forEach(l=>{l.addEventListener("change",async()=>{if(l.checked&&l.value!==this.game.gameMode){n.info("UI",`Game mode changing from ${this.game.gameMode} to ${l.value}`),await this.game.autoSave(),this.game.gameMode,this.game.setGameMode(l.value);const c=this.game.getStorageKey(),u=await w(c);u&&this.isValidSavedState(u)?(n.info("UI",`Loading saved state for ${l.value} mode`),this.game.loadGameState(u),this.updateDisplay(),this.showMessage(`Switched to ${l.value==="human-vs-human"?"Human vs Human":"Human vs Bot"} - Game restored!`)):(n.info("UI",`No saved state for ${l.value} mode - starting new game`),this.game.newGame(),this.onNewGameStart(),this.showMessage(`Switched to ${l.value==="human-vs-human"?"Human vs Human":"Human vs Bot"} - New game started!`)),this.updateOptionsButtons()}})}),document.querySelectorAll('input[name="playerColor"]').forEach(l=>{l.addEventListener("change",()=>{l.checked&&(n.info("UI",`Player color changed to: ${l.value}`),this.game.setHumanColor(l.value),this.game.autoSave())})}),document.querySelectorAll('input[name="soundEffects"]').forEach(l=>{l.addEventListener("change",()=>{if(l.checked){const c=l.value==="on";n.info("UI",`Sound effects changed to: ${c}`),this.game.soundEnabled=c,this.game.autoSave()}})}),document.querySelectorAll('input[name="allowUndo"]').forEach(l=>{l.addEventListener("change",()=>{if(l.checked){const c=l.value==="on";n.info("UI",`Allow undo changed to: ${c}`),this.game.allowUndo=c,this.game.autoSave()}})});const a=document.getElementById("new-game-btn"),i=document.getElementById("back-btn"),r=document.getElementById("options-overlay");a&&a.addEventListener("click",()=>{n.info("UI","New game button clicked"),this.confirmNewGame()}),i&&i.addEventListener("click",()=>{n.info("UI","Back button clicked"),this.hideOptionsMenu()}),r&&r.addEventListener("click",l=>{l.target===r&&(n.info("UI","Options overlay clicked outside"),this.hideOptionsMenu())})}confirmNewGame(){this.hideOptionsMenu(),this.clearSavedState(),this.game.newGame(),this.onNewGameStart(),this.showMessage("New game started!")}async clearSavedState(){n.info("CLEANUP","Clearing saved game state from storage");const e=["chess_game_state_human_vs_human","chess_game_state_human_vs_bot","chess_game_state"];if(window.creationStorage)try{for(const t of e)await window.creationStorage.plain.removeItem(t);n.info("CLEANUP","All saved game states cleared successfully from creationStorage"),console.log("All saved game states cleared")}catch(t){n.error("CLEANUP","Error clearing saved state from creationStorage",t),console.error("Error clearing saved state:",t)}else try{for(const t of e)localStorage.removeItem(t);n.info("CLEANUP","All saved game states cleared from localStorage fallback")}catch(t){n.error("CLEANUP","Error clearing saved state from localStorage",t)}}showInstructionLabel(e){const t=document.getElementById("instruction-label");t&&(t.textContent=e,t.classList.remove("hidden"),setTimeout(()=>{t.classList.add("hidden")},2e3))}showCheckAlert(e){const t=Date.now();if(t-this.lastAlertTime<this.alertCooldown){n.debug("UI","Check alert suppressed due to cooldown",{timeSinceLastAlert:t-this.lastAlertTime,cooldown:this.alertCooldown});return}this.lastAlertTime=t;const o=document.getElementById("instruction-label");o&&(this.alertTimeout&&clearTimeout(this.alertTimeout),o.textContent=e,o.classList.remove("hidden"),o.style.backgroundColor="#FE5F00",o.style.color="white",o.style.fontWeight="bold",n.info("UI","Check alert displayed",{message:e}),this.alertTimeout=setTimeout(()=>{o.classList.add("hidden"),o.style.backgroundColor="",o.style.color="",o.style.fontWeight="",this.alertTimeout=null},3e3))}highlightKing(e){for(let t=0;t<8;t++)for(let o=0;o<8;o++){const s=this.game.board[t][o];if(s&&s.type==="king"&&s.color===e){const a=this.boardElement.children[t*8+o];a&&(a.classList.contains("king-warning")||(a.classList.add("king-warning"),n.info("UI",`King highlighted for ${e}`,{row:t,col:o}),setTimeout(()=>{a.classList.remove("king-warning")},2e3)));return}}}animateUndoRedo(e){const t=this.boardElement;t&&(t.style.transform=e==="undo"?"scale(0.98)":"scale(1.02)",t.style.transition="transform 0.1s ease",setTimeout(()=>{t.style.transform="scale(1)",setTimeout(()=>{t.style.transition=""},100)},100));const o=this.game.getCurrentMoveIndex(),s=this.game.moveHistory.length,a=Math.ceil((o+1)/2);e==="undo"?o>=0?this.showInstructionLabel(`At move ${a} (${o+1}/${s})`):this.showInstructionLabel("At start of game"):e==="redo"&&this.showInstructionLabel(`At move ${a} (${o+1}/${s})`)}verifyUIConsistency(){n.debug("UI_VALIDATION","Verifying UI consistency with game state");const e=[];try{const t=document.getElementById("current-player");if(t){const r=t.textContent.toLowerCase();r.includes(this.game.currentPlayer)||e.push(`Current player display mismatch: UI shows "${r}", game state is "${this.game.currentPlayer}"`)}const o=document.getElementById("move-count");if(o){const r=this.game.getCurrentMoveIndex(),l=r>=0?Math.ceil((r+1)/2):0,c=o.textContent;c.includes(l.toString())||e.push(`Move count display mismatch: UI shows "${c}", expected move number ${l}`)}const s=this.boardElement.children;let a=0;for(let r=0;r<s.length;r++){const l=s[r],c=parseInt(l.dataset.row),u=parseInt(l.dataset.col),p=this.game.board[c][u],f=l.querySelectorAll(".chess-piece"),y=f.length>0,b=p!==null;if(y!==b)a++;else if(b&&y){const m=f[0],v=this.game.getPieceSymbol(p);m.textContent!==v&&a++}}a>0&&e.push(`Board display has ${a} piece mismatches with game state`);const i=document.getElementById("game-status");if(i&&i.textContent.trim()){const r=i.textContent.toLowerCase();this.game.gameStatus==="checkmate"&&!r.includes("checkmate")?e.push(`Game status display mismatch: game is checkmate but UI shows "${r}"`):this.game.gameStatus==="stalemate"&&!r.includes("stalemate")&&e.push(`Game status display mismatch: game is stalemate but UI shows "${r}"`)}return e.length>0?(n.warn("UI_VALIDATION","UI consistency issues detected",{issues:e}),!1):(n.debug("UI_VALIDATION","UI consistency verification passed"),!0)}catch(t){return n.error("UI_VALIDATION","Error during UI consistency verification",t),!1}}async loadGameState(){try{n.info("LOAD","Attempting to load saved game state from storage"),console.log("Attempting to load saved game state...");const e=this.game.getStorageKey();let t=await w(e);if(!t){n.info("LOAD",`No saved state found for current mode (${this.game.gameMode})`);const o=this.game.gameMode==="human-vs-human"?"human-vs-bot":"human-vs-human",s=`chess_game_state_${o.replace("-","_")}`;t=await w(s),t&&(n.info("LOAD",`Found saved state from other mode (${o}), but keeping current mode settings`),t.gameMode=this.game.gameMode,t.humanColor=this.game.humanColor)}return t||(t=await w("chess_game_state"),t&&n.info("LOAD","Found legacy saved state, migrating to new format")),t?(n.debug("LOAD","Raw state data retrieved from storage",{hasBoard:!!t.board,hasMoveHistory:!!t.moveHistory,moveCount:t.moveHistory?t.moveHistory.length:0,currentPlayer:t.currentPlayer,gameStatus:t.gameStatus}),this.isValidSavedState(t)?(n.info("LOAD","State validation passed - Loading game state",{moveCount:t.moveHistory.length,currentPlayer:t.currentPlayer,gameStatus:t.gameStatus,soundEnabled:t.soundEnabled,allowUndo:t.allowUndo}),console.log("Loading valid saved state"),this.game.loadGameState(t),this.applyTheme(),this.updateDisplay(),n.info("LOAD","Game state loaded and UI updated successfully"),console.log("Game state loaded successfully"),!0):(n.warn("LOAD","Saved state validation failed - Clearing invalid data"),console.log("Saved state validation failed, clearing invalid data"),await this.clearSavedState(),!1)):(n.info("LOAD","No saved state found in any storage location"),console.log("No saved state found"),!1)}catch(e){return n.error("LOAD","Exception occurred while loading game state",e),console.error("Error loading game state:",e),await this.clearSavedState(),!1}}isValidSavedState(e){var a;if(n.debug("VALIDATION","Starting saved state validation",{hasState:!!e,stateType:typeof e,hasBoard:!!(e!=null&&e.board),hasMoveHistory:!!(e!=null&&e.moveHistory),moveCount:((a=e==null?void 0:e.moveHistory)==null?void 0:a.length)||0,currentPlayer:e==null?void 0:e.currentPlayer}),!e||typeof e!="object")return n.warn("VALIDATION","Invalid state: not an object"),console.log("Invalid state: not an object"),!1;if(!e.board||!Array.isArray(e.board))return n.warn("VALIDATION","Invalid state: missing or invalid board"),console.log("Invalid state: missing or invalid board"),!1;if(e.moveHistory&&!Array.isArray(e.moveHistory))return n.warn("VALIDATION","Invalid state: moveHistory exists but is not array"),console.log("Invalid state: moveHistory exists but is not array"),!1;if(e.board.length!==8)return n.warn("VALIDATION",`Invalid state: board length is ${e.board.length}, expected 8`),console.log("Invalid state: board is not 8x8"),!1;for(let i=0;i<e.board.length;i++){const r=e.board[i];if(!Array.isArray(r)||r.length!==8)return n.warn("VALIDATION",`Invalid state: board row ${i} has length ${r==null?void 0:r.length}, expected 8`),console.log("Invalid state: board row is not valid"),!1}if(!e.currentPlayer||e.currentPlayer!=="white"&&e.currentPlayer!=="black")return n.warn("VALIDATION",`Invalid state: currentPlayer is '${e.currentPlayer}'`),console.log("Invalid state: invalid currentPlayer"),!1;const o=(e.moveHistory||[]).length,s=e.totalMoves||o;return n.debug("VALIDATION","Checking game progression criteria",{moveCount:o,totalMoves:s,currentPlayer:e.currentPlayer,gameStatus:e.gameStatus,hasCurrentMoveIndex:e.currentMoveIndex!==void 0}),o>0?(n.info("VALIDATION",`Valid state: has ${o} moves in history`),console.log("Valid state: has move history"),!0):e.currentPlayer==="black"?(n.info("VALIDATION","Valid state: current player is black (game started)"),console.log("Valid state: current player is black"),!0):e.gameStatus&&e.gameStatus!=="playing"?(n.info("VALIDATION",`Valid state: game status is '${e.gameStatus}'`),console.log("Valid state: game is completed"),!0):e.currentMoveIndex!==void 0&&e.currentMoveIndex>=0?(n.info("VALIDATION",`Valid state: has currentMoveIndex ${e.currentMoveIndex}`),console.log("Valid state: has move index"),!0):s>0?(n.info("VALIDATION",`Valid state: totalMoves is ${s}`),console.log("Valid state: has total moves"),!0):this.boardDiffersFromInitial(e.board)?(n.info("VALIDATION","Valid state: board position differs from initial setup"),console.log("Valid state: board position changed"),!0):(n.info("VALIDATION","State appears to be initial game state - treating as invalid for resume"),console.log("Invalid state: appears to be initial game state"),!1)}boardDiffersFromInitial(e){const t=this.game?this.game.initializeBoard():this.initializeBoard();for(let o=0;o<8;o++)for(let s=0;s<8;s++){const a=e[o][s],i=t[o][s];if(!(a===null&&i===null)&&(a===null||i===null||a.type!==i.type||a.color!==i.color))return!0}return!1}}window.addEventListener("scrollUp",()=>{console.log("Scroll up detected - redo move"),h&&g&&(h.allowUndo?h.redoMove()&&(h.selectedSquare=null,g.updateBoardPerspective(),g.updateDisplay(),g.animateUndoRedo("redo"),h.gameMode==="human-vs-bot"?h.isBotTurn()?(g.showBotThinking(!0),g.setInputEnabled(!1),setTimeout(()=>{g.handleBotTurn()},500)):(g.showBotThinking(!1),g.setInputEnabled(!0)):h.gameMode==="human-vs-human"&&g.setInputEnabled(!0)):g.showInstructionLabel("Push button to enable undo"))});window.addEventListener("scrollDown",()=>{console.log("Scroll down detected - undo move"),h&&g&&(h.allowUndo?h.undoMove()&&(h.selectedSquare=null,g.updateBoardPerspective(),g.updateDisplay(),g.animateUndoRedo("undo"),h.gameMode==="human-vs-bot"?h.isBotTurn()?(g.showBotThinking(!0),g.setInputEnabled(!1),setTimeout(()=>{g.handleBotTurn()},500)):(g.showBotThinking(!1),g.setInputEnabled(!0)):h.gameMode==="human-vs-human"&&g.setInputEnabled(!0)):g.showInstructionLabel("Push button to enable undo"))});let T=0;const P=300;window.addEventListener("sideClick",()=>{const d=Date.now();if(d-T<P){console.log("Side button click ignored (debounced)");return}T=d,console.log("Side button clicked - showing options menu"),h&&g&&g.showOptionsMenu()});window.addEventListener("longPressStart",()=>{console.log("Long press started")});window.addEventListener("longPressEnd",()=>{console.log("Long press ended - starting new game"),h&&g&&(g.clearSavedState(),h.newGame(),g.updateDisplay(),g.showMessage("New game started!"),I("new_game_started"))});window.onPluginMessage=function(d){if(console.log("Received plugin message:",d),d.data)try{const e=typeof d.data=="string"?JSON.parse(d.data):d.data;console.log("Parsed data:",e)}catch{console.log("Data as text:",d.data)}d.message&&console.log("Message text:",d.message)};function I(d,e={}){if(typeof PluginMessageHandler<"u"){const t={message:`Chess game event: ${d}`,gameEvent:d,details:e,wantsR1Response:!1,wantsJournalEntry:!1};PluginMessageHandler.postMessage(JSON.stringify(t))}}function k(d){let e=0;if(d.length===0)return e;for(let t=0;t<d.length;t++){const o=d.charCodeAt(t);e=(e<<5)-e+o,e=e&e}return Math.abs(e).toString(16)}async function A(d,e){if(n.debug("STORAGE",`Attempting to save data with key: ${d}`),!d||typeof d!="string")return n.error("STORAGE",`Invalid key provided to saveToStorage: ${d}`),console.error("Invalid key provided to saveToStorage:",d),!1;if(e==null)return n.error("STORAGE","Invalid value provided to saveToStorage: null or undefined"),console.error("Invalid value provided to saveToStorage:",e),!1;if(window.creationStorage&&window.creationStorage.plain&&typeof window.creationStorage.plain.setItem=="function")try{const o=JSON.stringify(e),s=btoa(o);return await window.creationStorage.plain.setItem(d,s),n.info("STORAGE","Successfully saved to creationStorage"),console.log("Data saved to creationStorage successfully"),!0}catch(o){n.error("STORAGE","creationStorage save failed",o),console.error("Error saving to creationStorage:",o)}try{const o=JSON.stringify(e);return localStorage.setItem(d,o),n.info("STORAGE","Successfully saved to localStorage fallback"),console.log("Data saved to localStorage fallback"),!0}catch(o){n.error("STORAGE","localStorage save failed",o),console.error("Error saving to localStorage:",o)}return!1}async function w(d){if(n.debug("STORAGE",`Attempting to load data with key: ${d}`),window.creationStorage&&window.creationStorage.plain&&typeof window.creationStorage.plain.getItem=="function")try{const t=await window.creationStorage.plain.getItem(d);if(t){const o=atob(t),s=JSON.parse(o);return n.info("STORAGE","Successfully loaded from creationStorage"),s}}catch(t){n.error("STORAGE","creationStorage load failed",t),console.error("Error loading from creationStorage:",t)}try{const t=localStorage.getItem(d);if(t){const o=JSON.parse(t);return n.info("STORAGE","Successfully loaded from localStorage fallback"),o}}catch(t){n.error("STORAGE","localStorage load failed",t),console.error("Error loading from localStorage:",t)}return null}document.addEventListener("DOMContentLoaded",async()=>{n.info("INIT","DOM Content Loaded - Starting chess game initialization"),console.log("R1 Chess Game initialized!"),typeof PluginMessageHandler>"u"&&(n.info("INIT","Browser mode detected - Setting up keyboard shortcuts"),window.addEventListener("keydown",e=>{e.code==="Space"&&(e.preventDefault(),n.debug("INPUT","Space key pressed (side button simulation)"),window.dispatchEvent(new CustomEvent("sideClick"))),e.code==="KeyN"&&(n.info("INPUT","N key pressed - New game shortcut"),g.clearSavedState(),h.newGame(),g.updateDisplay())})),n.info("INIT","Creating ChessGame instance"),h=new S,n.info("INIT","Creating ChessUI instance"),g=new M(h),n.info("INIT","Attempting to load saved game state"),await g.loadGameState()?(n.info("INIT","Successfully loaded saved game state - Game resumed"),console.log("Loaded saved game state"),g.updateDisplay(),g.gameStatusElement.textContent="Game resumed",setTimeout(()=>{g.gameStatusElement.textContent=""},2e3)):(n.info("INIT","No valid saved state found - Starting new game"),console.log("No saved state found - initializing new game"),h.newGame(),g.updateDisplay()),n.info("INIT","Sending game initialization event"),I("game_initialized",{theme:h.theme,currentPlayer:h.currentPlayer}),n.info("INIT","Chess game initialization complete")});window.addEventListener("beforeunload",d=>{n.info("EXIT","Page beforeunload event - Game is about to exit",{moveCount:h?h.moveHistory.length:0,currentPlayer:h?h.currentPlayer:"unknown",gameStatus:h?h.gameStatus:"unknown"})});window.addEventListener("unload",d=>{n.info("EXIT","Page unload event - Game is exiting")});window.addEventListener("visibilitychange",()=>{document.hidden?n.info("EXIT","Page visibility changed to hidden - Game backgrounded",{moveCount:h?h.moveHistory.length:0,currentPlayer:h?h.currentPlayer:"unknown"}):n.info("INIT","Page visibility changed to visible - Game foregrounded",{moveCount:h?h.moveHistory.length:0,currentPlayer:h?h.currentPlayer:"unknown"})});console.log("R1 Chess Game Ready!");console.log("Features:");console.log("- Full chess rules including en passant");console.log("- Touch-based piece movement");console.log("- Multiple visual themes");console.log("- Game state persistence");console.log("- Move sound effects");console.log("- Side button: Options menu");console.log("- Long press: New game");
